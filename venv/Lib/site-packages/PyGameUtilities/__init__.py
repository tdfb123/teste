import pygame;

WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (30, 30, 30)

pygame.mixer.pre_init(44100, 16, 2, 4096);
pygame.init();

SONG_END = pygame.USEREVENT + 1
DefaultFont = pygame.font.Font('freesansbold.ttf', 50);

### INPUT DEVICES ###
class PyMouse:
    def __init__( self ):
        self.pos = (0, 0);
        self.x = self.pos[0];
        self.y = self.pos[1];
        self.isDown = False;

class PyKeyboard:
    def __init__( self ):
        self.keys = [];
        self.clipboard = "";
        self.types = "";
    def keyDown(self, key):
        if key in self.keys:
            return True;
        else:
            return False;
    def clipboardDecode(self):
        types = pygame.scrap.get_types();
        if(types == []):
            return "Empty";
        Type = types[0];
        string = pygame.scrap.get(Type);
        if(Type == 'HTML Format'):
            return "Image";
        else:
            decoded = string.decode("utf-16").rstrip('\x00')
            return decoded;

def updateInput(Mouse, Keyboard, Sound):
    Mouse.pos = pygame.mouse.get_pos();
    Mouse.x = Mouse.pos[0];
    Mouse.y = Mouse.pos[1];
    Keyboard.clipboard = Keyboard.clipboardDecode();
    
    for event in pygame.event.get():
        ### MOUSE UPDATES ###
        if event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:
                Mouse.isDown = True;

        if event.type == pygame.MOUSEBUTTONUP:
            Mouse.isDown = False;
        ### KEYBOARD UPDATES ###
        if event.type == pygame.KEYDOWN:
            Keyboard.keys.append(pygame.key.name(event.key));
        if event.type == pygame.KEYUP:
            Keyboard.keys.remove(pygame.key.name(event.key));
        ### SOUND EVENTS ###
        if event.type == SONG_END:
            Sound.Stop();

### MISC ###
class PySound:
    def __init__(self):
        self.Channel = pygame.mixer.Channel(2);
        self.Channel.set_endevent(SONG_END);
        self.volume = 1;
        self.isPlaying = False;
        self.currentSound = None;
        self.loadedSounds = { };
    def Load(self, path):
        return pygame.mixer.Sound(path);
    def Play(self, path, times = 0):
        self.Channel.set_volume(self.volume);
        if path not in self.loadedSounds:
            self.loadedSounds[path] = self.Load(path);
        if(self.isPlaying):
            return;
        self.Channel.play(self.loadedSounds[path], times);
        self.isPlaying = True
        self.currentSound = path;
    def Stop(self):
        self.isPlaying = False;
        self.Channel.stop();
        self.currentSound = None;
        
### OBJECT DRAWING ###

class PyImage:
    def __init__( self, screen, path, x, y, width, height):
        self.isClicked = False;
        self.screen = screen.screen;
        self.width, self.height = width, height;
        self.pos = (x, y);
        self.imagePath = path;
        self.Draw();
        screen.objects.append(self);
        
    def Draw(self):
        self.x, self.y = self.pos[0], self.pos[1];
        self.image = pygame.image.load(self.imagePath);
        self.image = pygame.transform.scale(self.image, (self.width, self.height))
        self.rect = self.image.get_rect();
        self.rect = self.rect.move(self.pos)
        self.screen.blit(self.image, self.rect);
        
class PyRect:
    def __init__( self, screen, color, x, y, width, height):
        self.isClicked = False;
        self.mouseState = None;
        self.screen = screen.screen;
        self.width, self.height, self.color = width, height, color
        self.pos = (x, y);
        self.Draw();
        screen.objects.append(self);
        
    def Draw(self):
        self.x, self.y = self.pos[0], self.pos[1];
        self.rect = pygame.Rect(self.x, self.y, self.width, self.height);
        pygame.draw.rect(self.screen, self.color, self.rect);

class PyText:
    def __init__(self, screen, color, text, x, y, fontSize = 24):
        self.font = pygame.font.Font('freesansbold.ttf', fontSize);
        self.text = text;
        self.color = color;
        self.pos = (x, y);
        self.screen = screen.screen;
        self.Draw();
        screen.objects.append(self);
        
    def Draw(self):
        self.x, self.y = self.pos[0], self.pos[1];
        self.textSurface = self.font.render(self.text, True, self.color);
        self.rect = self.textSurface.get_rect();
        self.rect.center = self.pos;
        self.screen.blit(self.textSurface, self.rect);


### SCREEN CLASS ###
class PyScreen:
    def __init__(self, caption, color, width, height):
        self.width = width;
        self.height = height;
        self.color = color;
        self.mouse = PyMouse();
        self.keyboard = PyKeyboard();
        self.sound = PySound();
        self.caption = caption;
        self.objects = [];
        self.startScreen();

    def startScreen(self):
        pygame.display.set_caption(self.caption);
        self.screen = pygame.display.set_mode((self.width, self.height))
        pygame.scrap.init();
        
    def Exit(self):
        pygame.quit();

    def Wait(self, seconds):
        pygame.time.wait(seconds*1000);
        
    def updateScreen(self):
        pygame.display.flip()
        pygame.display.set_caption(self.caption)
        self.screen.fill(self.color);
        updateInput(self.mouse, self.keyboard, self.sound);
        for x in self.objects:
            if(x.rect.collidepoint(self.mouse.pos) and self.mouse.isDown):
                x.isClicked = True;
            else:
                x.isClicked = False;
            x.Draw();
